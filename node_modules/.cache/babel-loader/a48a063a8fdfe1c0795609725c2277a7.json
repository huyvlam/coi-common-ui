{"ast":null,"code":"import { containsKey } from 'LIB/coi-util/object';\nexport var removeEdges = function removeEdges(str) {\n  return str.replace(/^\\//, '').replace(/\\/\\w+$/, '');\n};\nexport var isPrimitive = function isPrimitive(value) {\n  return !!value && (value.constructor === String || value.constructor === Number || value.constructor === Boolean);\n};\nexport var checkContains = function checkContains(value, _ref) {\n  var contains = _ref.contains,\n      cannonicalValues = _ref.cannonicalValues,\n      description = _ref.description;\n  var options = contains ? contains : cannonicalValues;\n  if (!isPrimitive(value) || !options) return null;\n  var query = options.find(function (item) {\n    return item.constructor === Object ? item.value.toString() === value.toString() : item.toString() === value.toString();\n  });\n  return query ? {\n    status: 'completed',\n    valid: true,\n    description: description\n  } : {\n    status: 'error',\n    valid: false,\n    description: description\n  };\n};\nexport var checkEqual = function checkEqual(value, _ref2) {\n  var equal = _ref2.equal,\n      description = _ref2.description;\n  var primitive = isPrimitive(value),\n      validEqual = equal && containsKey(equal, 'value');\n  if (!primitive || !validEqual) return null;\n  return primitive && validEqual && value === equal.value ? {\n    status: 'completed',\n    valid: true,\n    description: description\n  } : {\n    status: 'error',\n    valid: false,\n    description: description\n  };\n};\nexport var checkUnequal = function checkUnequal(value, _ref3) {\n  var unequal = _ref3.unequal,\n      description = _ref3.description;\n  var primitive = isPrimitive(value),\n      validUnequal = unequal && containsKey(unequal, 'value');\n  if (!primitive || !validUnequal) return null;\n  return primitive && validUnequal && value !== unequal.value ? {\n    status: 'completed',\n    valid: true,\n    description: description\n  } : {\n    status: 'error',\n    valid: false,\n    description: description\n  };\n};\nexport var checkLength = function checkLength(value, _ref4) {\n  var length = _ref4.length,\n      minLength = _ref4.minLength,\n      maxLength = _ref4.maxLength,\n      description = _ref4.description;\n  var primitive = isPrimitive(value);\n  if (!primitive || !length && (!minLength || !maxLength)) return null;\n  var valueLength = value.toString().length;\n  var valid = length ? valueLength === Number(length) : valueLength >= Number(minLength) && valueLength <= Number(maxLength);\n  var status = valid ? 'completed' : 'error';\n  return {\n    status: status,\n    valid: valid,\n    description: description\n  };\n};\nexport var checkRegex = function checkRegex(value, _ref5) {\n  var regex = _ref5.regex,\n      description = _ref5.description;\n  var primitive = isPrimitive(value);\n  if (!primitive || !regex) return null;\n  var pattern = regex.constructor === RegExp ? regex : RegExp(removeEdges(regex), 'g');\n  var valid = pattern.test(value);\n  var status = valid ? 'completed' : 'error';\n  return {\n    status: status,\n    valid: valid,\n    description: description\n  };\n};\nexport var checkDictionaryField = function checkDictionaryField(value, _ref6) {\n  var regex = _ref6.regex,\n      length = _ref6.length,\n      minLength = _ref6.minLength,\n      maxLength = _ref6.maxLength,\n      description = _ref6.description;\n  var regexCheck = checkRegex(value, {\n    regex: regex\n  });\n  if (regexCheck === null) return null;\n  var lengthCheck = checkLength(value, {\n    length: length,\n    minLength: minLength,\n    maxLength: maxLength\n  });\n  if (lengthCheck === null) return null;\n  return regexCheck.valid && lengthCheck.valid ? {\n    status: 'completed',\n    valid: true,\n    description: description\n  } : {\n    status: 'error',\n    valid: false,\n    description: description\n  };\n};\nexport var validateInputList = function validateInputList() {\n  var inputFields = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var excludedNames = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n  for (var i = 0; i < inputFields.length; i++) {\n    var _inputFields$i = inputFields[i],\n        name = _inputFields$i.name,\n        value = _inputFields$i.value,\n        _inputFields$i$valida = _inputFields$i.validation,\n        validation = _inputFields$i$valida === void 0 ? {} : _inputFields$i$valida,\n        valid = _inputFields$i.valid;\n    var required = validation.required;\n\n    if (excludedNames.includes(name)) {\n      continue;\n    }\n\n    if (required && !isPrimitive(value) || value && validation && !valid) {\n      return false;\n    }\n  }\n\n  return true;\n};","map":null,"metadata":{},"sourceType":"module"}