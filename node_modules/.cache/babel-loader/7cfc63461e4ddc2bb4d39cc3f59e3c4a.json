{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { COI_TENANT } from 'LIB/coi-path/path-config';\nimport { navStateApiPath } from 'LIB/coi-path/api';\nimport { urlParamToObject } from 'LIB/coi-util/path';\nimport { handleGETRequest } from 'LIB/coi-util/network';\n/**\n * Returns an object with redirect url and email address\n *\n * @param{string} tenant  user's tenant value\n * @param{string} token   navigation state id\n * @returns{Object}       Object with redirectUrl and emailAddress\n */\n\nfunction fetchUrl(_x, _x2) {\n  return _fetchUrl.apply(this, arguments);\n}\n\nfunction _fetchUrl() {\n  _fetchUrl = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(tenant, token) {\n    var urlParam, _ref2, status, payload, _payload$state, state, discovery_url, _state$email, email, issuer, offline_url, redirect_uri, redirectUrl;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            urlParam = urlParamToObject();\n            _context.next = 4;\n            return handleGETRequest(navStateApiPath('nav state id', {\n              navStateId: token\n            }));\n\n          case 4:\n            _ref2 = _context.sent;\n            status = _ref2.status;\n            payload = _ref2.payload;\n\n            if (!(status >= 200 && status < 300)) {\n              _context.next = 12;\n              break;\n            }\n\n            _payload$state = payload.state, state = _payload$state === void 0 ? {} : _payload$state;\n            discovery_url = state.discovery_url, _state$email = state.email, email = _state$email === void 0 ? urlParam.email : _state$email, issuer = state.issuer, offline_url = state.offline_url, redirect_uri = state.redirect_uri;\n\n            if (discovery_url) {\n              redirectUrl = discovery_url;\n            } else if (offline_url) {\n              redirectUrl = offline_url;\n            } else {\n              redirectUrl = redirect_uri;\n            }\n\n            return _context.abrupt(\"return\", {\n              email: email || '',\n              isDiscovery: discovery_url,\n              redirectUrl: redirectUrl,\n              issuer: issuer\n            });\n\n          case 12:\n            _context.next = 17;\n            break;\n\n          case 14:\n            _context.prev = 14;\n            _context.t0 = _context[\"catch\"](0);\n            throw _context.t0;\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 14]]);\n  }));\n  return _fetchUrl.apply(this, arguments);\n}\n\n;\n/**\n * Returns a promise for an object with redirectUrl, issuerUrl, and email\n * for a navStateId query parameter\n *\n * @param{string} token  navigation state id\n * @returns {Promise} Promise for an object with redirectUrl, issuer, email\n */\n\nvar getNavState = function getNavState() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      navStateId = _ref.navStateId,\n      _ref$tenant = _ref.tenant,\n      tenant = _ref$tenant === void 0 ? COI_TENANT : _ref$tenant;\n\n  try {\n    if (navStateId) {\n      return fetchUrl(tenant, navStateId);\n    }\n\n    var urlParam = urlParamToObject();\n\n    if (urlParam.navStateId) {\n      return fetchUrl(tenant, urlParam.navStateId);\n    }\n\n    return null;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport default getNavState;","map":null,"metadata":{},"sourceType":"module"}