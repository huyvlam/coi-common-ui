{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { objectToUrlParam } from 'LIB/coi-util/path';\n/**\n * @desc: a wrapper function which standardize the way all GET request are being handled\n */\n\nexport function handleGETRequest(_x) {\n  return _handleGETRequest.apply(this, arguments);\n}\n\nfunction _handleGETRequest() {\n  _handleGETRequest = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(path) {\n    var payload,\n        query,\n        request,\n        _ref,\n        requestId,\n        result,\n        response,\n        status,\n        statusText,\n        redirected,\n        type,\n        _args = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            payload = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n            _context.prev = 1;\n            query = objectToUrlParam(payload);\n            _context.next = 5;\n            return fetch(\"\".concat(path).concat(query));\n\n          case 5:\n            request = _context.sent;\n            _context.next = 8;\n            return request.json();\n\n          case 8:\n            _ref = _context.sent;\n            requestId = _ref.requestId;\n            result = _ref.result;\n            response = _ref.response;\n            status = request.status, statusText = request.statusText, redirected = request.redirected, type = request.type;\n            return _context.abrupt(\"return\", {\n              payload: response,\n              requestId: requestId,\n              result: result,\n              status: status,\n              statusText: statusText,\n              redirected: redirected,\n              type: type\n            });\n\n          case 16:\n            _context.prev = 16;\n            _context.t0 = _context[\"catch\"](1);\n            // TODO: implement error common error handling method here\n            console.error(_context.t0);\n\n          case 19:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 16]]);\n  }));\n  return _handleGETRequest.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/huyster/ui-workspace/coi-common/src/lib/coi-util/network.js"],"names":["objectToUrlParam","handleGETRequest","path","payload","query","fetch","request","json","requestId","result","response","status","statusText","redirected","type","console","error"],"mappings":";;AAAA,SAASA,gBAAT,QAAiC,mBAAjC;AAEA;;;;AAGA,gBAAsBC,gBAAtB;AAAA;AAAA;;;;;2BAAO,iBAAgCC,IAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAsCC,YAAAA,OAAtC,2DAAgD,EAAhD;AAAA;AAEGC,YAAAA,KAFH,GAEWJ,gBAAgB,CAACG,OAAD,CAF3B;AAAA;AAAA,mBAGmBE,KAAK,WAAIH,IAAJ,SAAWE,KAAX,EAHxB;;AAAA;AAGGE,YAAAA,OAHH;AAAA;AAAA,mBAI2CA,OAAO,CAACC,IAAR,EAJ3C;;AAAA;AAAA;AAIKC,YAAAA,SAJL,QAIKA,SAJL;AAIgBC,YAAAA,MAJhB,QAIgBA,MAJhB;AAIwBC,YAAAA,QAJxB,QAIwBA,QAJxB;AAKKC,YAAAA,MALL,GAK8CL,OAL9C,CAKKK,MALL,EAKaC,UALb,GAK8CN,OAL9C,CAKaM,UALb,EAKyBC,UALzB,GAK8CP,OAL9C,CAKyBO,UALzB,EAKqCC,IALrC,GAK8CR,OAL9C,CAKqCQ,IALrC;AAAA,6CAOI;AACLX,cAAAA,OAAO,EAAEO,QADJ;AAELF,cAAAA,SAAS,EAATA,SAFK;AAEMC,cAAAA,MAAM,EAANA,MAFN;AAEcE,cAAAA,MAAM,EAANA,MAFd;AAEsBC,cAAAA,UAAU,EAAVA,UAFtB;AAEkCC,cAAAA,UAAU,EAAVA,UAFlC;AAE8CC,cAAAA,IAAI,EAAJA;AAF9C,aAPJ;;AAAA;AAAA;AAAA;AAaH;AACAC,YAAAA,OAAO,CAACC,KAAR;;AAdG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import { objectToUrlParam } from 'LIB/coi-util/path';\n\n/**\n * @desc: a wrapper function which standardize the way all GET request are being handled\n */\nexport async function handleGETRequest(path, payload = {}) {\n  try {\n    const query = objectToUrlParam(payload);\n    const request = await fetch(`${path}${query}`);\n    const { requestId, result, response } = await request.json();\n    const { status, statusText, redirected, type } = request;\n\n    return {\n      payload: response,\n      requestId, result, status, statusText, redirected, type\n    };\n\n  } catch(error) {\n    // TODO: implement error common error handling method here\n    console.error(error);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}