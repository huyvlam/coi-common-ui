{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { objectToUrlParam } from 'LIB/coi-util/path';\n/**\n * @desc: a wrapper function which standardize the way all GET request are being handled\n */\n\nexport function handleGETRequest(_x) {\n  return _handleGETRequest.apply(this, arguments);\n}\n\nfunction _handleGETRequest() {\n  _handleGETRequest = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(path) {\n    var payload,\n        query,\n        request,\n        _ref,\n        requestId,\n        result,\n        response,\n        status,\n        statusText,\n        redirected,\n        type,\n        _args = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            payload = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n            _context.prev = 1;\n            query = objectToUrlParam(payload);\n            _context.next = 5;\n            return fetch(\"\".concat(path).concat(query));\n\n          case 5:\n            request = _context.sent;\n            _context.next = 8;\n            return request.json();\n\n          case 8:\n            _ref = _context.sent;\n            requestId = _ref.requestId;\n            result = _ref.result;\n            response = _ref.response;\n            status = request.status, statusText = request.statusText, redirected = request.redirected, type = request.type;\n            return _context.abrupt(\"return\", {\n              payload: response,\n              requestId: requestId,\n              result: result,\n              status: status,\n              statusText: statusText,\n              redirected: redirected,\n              type: type\n            });\n\n          case 16:\n            _context.prev = 16;\n            _context.t0 = _context[\"catch\"](1);\n            // TODO: implement error common error handling method here\n            console.error(_context.t0);\n\n          case 19:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 16]]);\n  }));\n  return _handleGETRequest.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"module"}