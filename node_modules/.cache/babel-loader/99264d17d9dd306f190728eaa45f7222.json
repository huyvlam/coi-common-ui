{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport 'core-js/stable';\nimport { COI_LOCALE_INFO } from 'LIB/coi-locale';\nimport { dictionaryApiPath } from 'LIB/coi-path/api';\nimport { handleGETRequest } from 'LIB/coi-util/network';\n\nvar DictionaryAPIS =\n/*#__PURE__*/\nfunction () {\n  function DictionaryAPIS() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : COI_LOCALE_INFO,\n        locale = _ref.locale,\n        country = _ref.country;\n\n    _classCallCheck(this, DictionaryAPIS);\n\n    this.locale = locale;\n    this.country = country;\n  }\n\n  _createClass(DictionaryAPIS, [{\n    key: \"getFields\",\n    value: function () {\n      var _getFields = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var locale,\n            _args = arguments;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                locale = _args.length > 0 && _args[0] !== undefined ? _args[0] : this.locale;\n                return _context.abrupt(\"return\", handleGETRequest(dictionaryApiPath('fields', {\n                  locale: locale\n                })));\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getFields() {\n        return _getFields.apply(this, arguments);\n      }\n\n      return getFields;\n    }()\n  }, {\n    key: \"getRules\",\n    value: function () {\n      var _getRules = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var country,\n            _args2 = arguments;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                country = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : this.country;\n                return _context2.abrupt(\"return\", handleGETRequest(dictionaryApiPath('rulers', {\n                  country: country\n                })));\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getRules() {\n        return _getRules.apply(this, arguments);\n      }\n\n      return getRules;\n    }()\n  }]);\n\n  return DictionaryAPIS;\n}();\n\nexport default DictionaryAPIS;","map":null,"metadata":{},"sourceType":"module"}