{"ast":null,"code":"import { COI_TENANT } from 'LIB/coi-path/path-config';\nimport { authBasePath } from './api-base';\nimport { keyCloakVersion } from './consul.config.json';\n\nvar apiPathToAuth = function apiPathToAuth() {\n  return \"\".concat(authBasePath(), \"api\");\n};\n\nvar apiPathToAuthTenant = function apiPathToAuthTenant() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$tenant = _ref.tenant,\n      tenant = _ref$tenant === void 0 ? COI_TENANT : _ref$tenant;\n\n  return \"\".concat(apiPathToAuth(), \"/tenants/\").concat(tenant);\n};\n\nvar apiPathToAuthTenantVersion = function apiPathToAuthTenantVersion() {\n  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      tenant = _ref2.tenant;\n\n  return \"\".concat(apiPathToAuthTenant({\n    tenant: tenant\n  }), \"/\").concat(keyCloakVersion);\n};\n\nvar apiPathToManageAccess = function apiPathToManageAccess() {\n  var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      tenant = _ref3.tenant;\n\n  return \"\".concat(apiPathToAuthTenantVersion({\n    tenant: tenant\n  }), \"/am\");\n};\n\nvar apiPathToProtocol = function apiPathToProtocol(_ref4) {\n  var tenant = _ref4.tenant;\n  return \"\".concat(apiPathToManageAccess({\n    tenant: tenant\n  }), \"/protocol\");\n};\n\nvar apiPathToOpenConnect = function apiPathToOpenConnect(_ref5) {\n  var tenant = _ref5.tenant;\n  return \"\".concat(apiPathToProtocol({\n    tenant: tenant\n  }), \"/openid-connect\");\n};\n\nvar apiPathToOpenAuth = function apiPathToOpenAuth(_ref6) {\n  var tenant = _ref6.tenant;\n  return \"\".concat(apiPathToOpenConnect({\n    tenant: tenant\n  }), \"/auth\");\n};\n\nvar apiPathToOpenUserInfo = function apiPathToOpenUserInfo(_ref7) {\n  var tenant = _ref7.tenant;\n  return \"\".concat(apiPathToOpenConnect({\n    tenant: tenant\n  }), \"/userinfo\");\n};\n\nvar apiPathToLogout = function apiPathToLogout() {\n  var _ref8 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      tenant = _ref8.tenant;\n\n  return \"\".concat(apiPathToOpenConnect({\n    tenant: tenant\n  }), \"/logout\");\n};\n\nvar apiPathToOpenToken = function apiPathToOpenToken() {\n  var _ref9 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      tenant = _ref9.tenant;\n\n  return \"\".concat(apiPathToOpenConnect({\n    tenant: tenant\n  }), \"/token\");\n};\n\nvar apiPathToOpenIntrospect = function apiPathToOpenIntrospect() {\n  var _ref10 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      tenant = _ref10.tenant;\n\n  return \"\".concat(apiPathToOpenToken({\n    tenant: tenant\n  }), \"/introspect\");\n};\n\nvar authenticationApiPath = function authenticationApiPath(type, options) {\n  if (!type) {\n    throw Error('missing required argument - type');\n  }\n\n  if (type === 'base') {\n    return authBasePath();\n  }\n\n  if (type === 'auth api') {\n    return apiPathToAuth(options);\n  }\n\n  if (type === 'auth tenant') {\n    return apiPathToAuthTenant(options);\n  }\n\n  if (type === 'auth version') {\n    return apiPathToAuthTenantVersion(options);\n  }\n\n  if (type === 'access management') {\n    return apiPathToManageAccess(options);\n  }\n\n  if (type === 'protocol') {\n    return apiPathToProtocol(options);\n  }\n\n  if (type === 'open connect') {\n    return apiPathToOpenConnect(options);\n  }\n\n  if (type === 'open connect auth') {\n    return apiPathToOpenAuth(options);\n  }\n\n  if (type === 'user info') {\n    return apiPathToOpenUserInfo(options);\n  }\n\n  if (type === 'logout') {\n    return apiPathToLogout(options);\n  }\n\n  if (type === 'token') {\n    return apiPathToOpenToken(options);\n  }\n\n  if (type === 'introspect') {\n    return apiPathToOpenIntrospect(options);\n  }\n};\n\nexport default authenticationApiPath;","map":{"version":3,"sources":["/Users/huyster/ui-workspace/coi-common/src/lib/coi-path/api/api-authentication.js"],"names":["COI_TENANT","authBasePath","keyCloakVersion","apiPathToAuth","apiPathToAuthTenant","tenant","apiPathToAuthTenantVersion","apiPathToManageAccess","apiPathToProtocol","apiPathToOpenConnect","apiPathToOpenAuth","apiPathToOpenUserInfo","apiPathToLogout","apiPathToOpenToken","apiPathToOpenIntrospect","authenticationApiPath","type","options","Error"],"mappings":"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","sourcesContent":["import { COI_TENANT } from 'LIB/coi-path/path-config';\nimport { authBasePath } from './api-base';\nimport { keyCloakVersion } from './consul.config.json';\n\nconst apiPathToAuth = () => {\n  return `${authBasePath()}api`;\n};\n\nconst apiPathToAuthTenant = ({ tenant = COI_TENANT } = {}) => {\n  return `${apiPathToAuth()}/tenants/${tenant}`;\n};\n\nconst apiPathToAuthTenantVersion = ({ tenant } = {}) => {\n  return `${apiPathToAuthTenant({tenant})}/${keyCloakVersion}`;\n};\n\nconst apiPathToManageAccess = ({ tenant } = {}) => {\n  return `${apiPathToAuthTenantVersion({tenant})}/am`;\n};\n\nconst apiPathToProtocol = ({ tenant }) => {\n  return `${apiPathToManageAccess({tenant})}/protocol`;\n};\n\nconst apiPathToOpenConnect = ({ tenant }) => {\n  return `${apiPathToProtocol({tenant})}/openid-connect`;\n};\n\nconst apiPathToOpenAuth = ({ tenant }) => {\n  return `${apiPathToOpenConnect({tenant})}/auth`;\n};\n\nconst apiPathToOpenUserInfo = ({ tenant }) => {\n  return `${apiPathToOpenConnect({tenant})}/userinfo`;\n};\n\nconst apiPathToLogout = ({tenant} = {}) => {\n  return `${apiPathToOpenConnect({tenant})}/logout`;\n};\n\nconst apiPathToOpenToken = ({tenant} = {}) => {\n  return `${apiPathToOpenConnect({tenant})}/token`;\n};\n\nconst apiPathToOpenIntrospect = ({tenant} = {}) => {\n  return `${apiPathToOpenToken({tenant})}/introspect`;\n};\n\nconst authenticationApiPath = (type, options) => {\n  if (!type) {\n    throw Error('missing required argument - type');\n  }\n\n  if (type === 'base') {return authBasePath();}\n  if (type === 'auth api') {return apiPathToAuth(options);}\n  if (type === 'auth tenant') {return apiPathToAuthTenant(options);}\n  if (type === 'auth version') {return apiPathToAuthTenantVersion(options);}\n  if (type === 'access management') {return apiPathToManageAccess(options);}\n  if (type === 'protocol') {return apiPathToProtocol(options);}\n  if (type === 'open connect') {return apiPathToOpenConnect(options);}\n  if (type === 'open connect auth') {return apiPathToOpenAuth(options);}\n  if (type === 'user info') {return apiPathToOpenUserInfo(options);}\n  if (type === 'logout') {return apiPathToLogout(options);}\n  if (type === 'token') {return apiPathToOpenToken(options);}\n  if (type === 'introspect') {return apiPathToOpenIntrospect(options);}\n};\n\nexport default authenticationApiPath;\n"]},"metadata":{},"sourceType":"module"}