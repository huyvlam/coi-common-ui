{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/*\n * COI Data Dictionary - Core\n */\nimport DictionaryAPIS from 'LIB/coi-apis/DictionaryAPIS';\nimport revisedDictFields from 'LIB/coi-dictionary/metadata/revised-field';\nimport { replaceAt } from 'LIB/coi-util/array';\nimport { COI_LOCALE_INFO } from 'LIB/coi-locale';\nvar DICT_APIS = new DictionaryAPIS();\nvar DICT_FIELDS = [];\n\nvar DictionaryCore =\n/*#__PURE__*/\nfunction () {\n  function DictionaryCore() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _objectSpread({}, COI_LOCALE_INFO),\n        _ref$revisedFields = _ref.revisedFields,\n        revisedFields = _ref$revisedFields === void 0 ? revisedDictFields : _ref$revisedFields,\n        _ref$locale = _ref.locale,\n        locale = _ref$locale === void 0 ? COI_LOCALE_INFO.locale : _ref$locale,\n        _ref$country = _ref.country,\n        country = _ref$country === void 0 ? COI_LOCALE_INFO.country : _ref$country;\n\n    _classCallCheck(this, DictionaryCore);\n\n    this.locale = locale;\n    this.revisedFields = revisedFields;\n    this.fields = DICT_FIELDS;\n\n    if (this.fields.length) {\n      this.reviseFields();\n    } else {\n      this.fetchDictionaryFields();\n    }\n  }\n  /*\n   * @desc: Request data dictionary from API service\n   */\n\n\n  _createClass(DictionaryCore, [{\n    key: \"fetchDictionaryFields\",\n    value: function () {\n      var _fetchDictionaryFields = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var _ref2, payload;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return DICT_APIS.getFields();\n\n              case 3:\n                _ref2 = _context.sent;\n                payload = _ref2.payload;\n                payload.forEach(function (field, index) {\n                  Object.defineProperty(DICT_FIELDS, index, {\n                    value: _objectSpread({}, field),\n                    enumerable: true,\n                    writable: false\n                  });\n                });\n                this.fields = [].concat(DICT_FIELDS);\n                this.reviseFields();\n                _context.next = 13;\n                break;\n\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context[\"catch\"](0);\n                console.error(_context.t0);\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 10]]);\n      }));\n\n      function fetchDictionaryFields() {\n        return _fetchDictionaryFields.apply(this, arguments);\n      }\n\n      return fetchDictionaryFields;\n    }()\n    /*\n     * @desc: Revise fields from data dictionary\n     */\n\n  }, {\n    key: \"reviseFields\",\n    value: function reviseFields() {\n      var _this = this;\n\n      var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this,\n          revisedFields = _ref3.revisedFields;\n\n      revisedFields.forEach(function (revision) {\n        var index = _this.fields.findIndex(function (definition) {\n          return definition.name === revision.name;\n        });\n\n        if (index === -1) {\n          _this.fields = [].concat(_toConsumableArray(_this.fields), [revision]);\n        } else {\n          _this.fields = replaceAt(index, _this.fields, _objectSpread({}, _this.fields[index], {}, revision));\n        }\n      });\n    }\n    /*\n     * @desc: Find and return definition by name\n     */\n\n  }, {\n    key: \"findField\",\n    value: function findField(fieldName) {\n      return this.fields.find(function (field) {\n        return field.name === fieldName;\n      });\n    }\n  }]);\n\n  return DictionaryCore;\n}();\n\nexport default DictionaryCore;","map":null,"metadata":{},"sourceType":"module"}